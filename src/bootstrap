#!/bin/bash

## FUNCTIONS ##
shutdown_hooks=()

function atexit() {
    val=$(echo "$@")
    shutdown_hooks+=("$val")
}

function log() { 
    echo "$@"
    cat << EOF | logger --journald
MESSAGE_ID=8675f7ada3f4452088c1f37b54b76411
MESSAGE=$@
EOF
}

function fatal() {
    exit_code=$1
    shift
    log "$@"
    exit $exit_code
}

function shutdown() {
    log "Running shutdown hooks..."
    for ((i=${#shutdown_hooks[0]}-1; i >=0 ; i--)); do
        if [ ! -z "${shutdown_hooks[$i]}" ]; then
            log "${shutdown_hooks[$i]}"
        fi
        eval "${shutdown_hooks[$i]}"
    done
}

# Exit if the supplied value is empty
function exit_if_empty() {
    if [ -z "$1" ]; then
        log "$1 is required! Exiting with failure."
        exit 1
    fi    
}

trap "echo Ignoring SIGHUP" HUP
trap "shutdown ; exit 1" INT TERM EXIT

log "Parsing command line"
if [ $# -eq 0 ]; then
    log "No command line arguments passed, using /proc/cmdline"
    args=( $( cat /proc/cmdline | sed 's/ /\n/g' | grep -P '^bootstrap' | sort ) )
else
    args=("$@")
fi

for envvar in "${args[@]}"; do
    export $envvar
done

target_device=${bootstrap_target_device:-}

megabytes=$(( 1024 * 1024 ))

if [ -z "$target_device" ] ; then
    log "Searching for a device to install on..."
    smallest=0
    target_device=
    while read line ; do
        d=$(echo $line | cut -d' ' -f1)
        size=$(echo $line | cut -d' ' -f2)
        
        if [ -z "$target_device" ]; then
            target_device="/dev/$d"
            smallest=$size
        fi
        
        if [ $size -lt $smallest ] ; then
            target_device="/dev/$d"
            smallest=$size            
        fi
    done < <( lsblk -brn -oNAME,SIZE,TYPE | grep disk )
    
    if [ -z "$target_device" ] ; then
        fatal 1 "No block device could be located to provision."
    fi
    
    log "Provisioning $target_device (smallest device)"
fi

log "Get installed RAM to compute swap size"
installed_ram_mb=$(dmidecode -t 17 | awk '( /Size/ && $2 ~ /^[0-9]+$/ ) { x+=$2 } END{ print x }')
log "$installed_ram_mb MB RAM detected"

swap_size_mb=$(echo "sqrt ( $installed_ram_mb )" | bc -l | cut -d'.' -f1)
log "$swap_size_mb minimum swap size"

log "Partitioning ${target_device}"
sgdisk -o -n 1:0:+2M -n 2:0:+1000M -n 3:0:+${swap_size_mb}M -n 4:0:0 \
    -t 1:ef02 -t 2:ef00 -t 3:8200 -t 4:8300 \
    -c 1:"grub" -c 2:"EFI" -c 3:"Swap" -c 4:"Root" ${target_device} \
    || fatal 1 "Partitioning failed."

log "Reload partition tables..."
blockdev --rereadpt "${target_device}" || fatal 1 "Could not re-read partition tables."

log "Get target partition..."
grub_part=$(lsblk -rpn -oTYPE,NAME "${target_device}" | grep '^part ' | cut -d' ' -f2 | sed '1q;d')
efi_part=$(lsblk -rpn -oTYPE,NAME "${target_device}" | grep '^part ' | cut -d' ' -f2 | sed '2q;d')
swap_part=$(lsblk -rpn -oTYPE,NAME "${target_device}" | grep '^part ' | cut -d' ' -f2 | sed '3q;d')
target_part=$(lsblk -rpn -oTYPE,NAME "${target_device}" | grep '^part ' | cut -d' ' -f2 | sed '4q;d')

log "Creating EFI filesystem"
mkfs.fat -F32 "$efi_part"

log "Creating swap filesystem"
mkswap "$swap_part"

log "Creating root filesystem"
# TODO: replace with ZFS
mkfs.ext4 "${target_part}" || fatal 1 "Could not create root filesystem."

log "Reading the root UUID (note: set by filesystem, not GPT)"
root_uuid=$(blkid -o value -s UUID "${target_part}")
efi_uuid=$(blkid -o value -s UUID "${efi_part}")
swap_uuid=$(blkid -o value -s UUID "${swap_part}")
grub_uuid=$(blkid -o value -s UUID "${grub_part}")

log "Mounting root filesystem"
mount "${target_part}" /sysroot || fatal 1 "Could not mount new root filesystem."

# Set bootstrap root password if requested.
if [ ! -z "${bootstrap_root_password}" ]; then
    log "Copying initial root credentials..."
    echo "root:$bootstrap_root_password" | chpasswd || fatal 1 "Could not set bootstrap root password."
fi

# Bootstrap root key is not optional.
mkdir -p /root/.ssh || fatal 1 "Could not create root .ssh dir"
chmod 755 /root/.ssh || fatal 1 "Could not set ownership on root .ssh dir"
if [ ! -z "${bootstrap_root_key}" ]; then
    log "Copying initial root SSH key..."
    ( echo "$bootstrap_root_key" | base64 -d > /root/.ssh/authorized_keys ) || fatal 1 "Failed decoding bootstrap root key."
fi

log "Copying bootstrap initramfs to root..."
rsync -W -a -x --human-readable / /sysroot/ 2>&1 || fatal 1 "Failed copying OS to /sysroot"

log "Ensure efi dir exists..."
mkdir -p /sysroot/boot/efi

log "Writing /etc/fstab ..."
# TODO: fix this if we change root partitioning above
echo "UUID=${root_uuid}     /           ext4    defaults,noatime,discard    0   0" > /sysroot/etc/fstab
echo "UUID=${efi_uuid}      /boot/efi   vfat    defaults,noatime,discard    0   0" >> /sysroot/etc/fstab
echo "UUID=${swap_uuid}     none        swap                0   0" >> /sysroot/etc/fstab

log "Converting initrd to os..."
mv /sysroot/etc/initrd-release /sysroot/etc/os-release || fatal 1 "Failed moving initrd-release to os-release"

log "Making machine-id permanent..."
systemd-machine-id-setup --commit --root=/sysroot || fatal 1 "Could not set machine-id on new root."

if [ -d /sys/firmware/efi ] ; then
    log "Installing EFI grub"
    grub-install --root=/sysroot --efi-directory=/sysroot/boot/efi ${target_device} || fatal 1 "grub-install failed."    
else
    log "Installing BIOS grub"
    grub-install --root=/sysroot ${target_device} || fatal 1 "grub-install failed."
fi

mount --bind /dev /sysroot/dev
mount --bind /sys /sysroot/sys
mount --bind /proc /sysroot/proc

log "Generate initramfs for new system..."
chroot /sysroot update-initramfs -c -k $(uname -r) || fatal 1 "Create initramfs failed."
log "Update Grub..."
chroot /sysroot /usr/sbin/update-grub || fatal 1 "Update grub failed."

umount /sysroot/dev
umount /sysroot/sys
umount /sysroot/proc

log "Cleaning up bootstrap specific files on root..."
source /bootstrap_cleanup

trap - INT TERM EXIT
shutdown

log "Exiting successfully."
exit 0
